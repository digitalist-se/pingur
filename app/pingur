#!/usr/bin/env php
<?php
// set to run indefinitely if needed
set_time_limit(0);
date_default_timezone_set('Europe/Stockholm');
// Ensure that errors are only reported once.
ini_set('display_errors', 1);
ini_set('log_errors', 0);
// Include the composer autoloader
define('CLI_ROOT', __DIR__);

if (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    require __DIR__ . '/../vendor/autoload.php';
}

if (file_exists(CLI_ROOT . '/vendor/autoload.php')) {
    require CLI_ROOT . '/vendor/autoload.php';
} elseif (file_exists(CLI_ROOT . '/../../../autoload.php')) {
    // we are globally installed via Composer
    require CLI_ROOT . '/../../../autoload.php';
}

use Symfony\Bridge\ProxyManager\LazyProxy\Instantiator\RuntimeInstantiator;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\Console\Input\InputOption;


$container = new ContainerBuilder();
// In order to have the container be available, or actually injected,
// into the commands, I set the 'DropcatContainer' to be the container it self.
// In services.yml we use '@DropcatContainer' to inject it into the command.
$container->set('DropcatContainer', $container);
$loader = new YamlFileLoader($container, new FileLocator(__DIR__ . '/config'));

$container->setProxyInstantiator(new RuntimeInstantiator());
$loader = new YamlFileLoader($container, new FileLocator(__DIR__ . '/config'));

$loader->load('services.yml');

$output = $container->get('symfony.console_output');
/** @var \Symfony\Component\Console\Application $application */
$application = $container->get('symfony.application');

// Get commands.
$commands = $container->findTaggedServiceIds('console.command');
$commandsToInit = array();
foreach ($commands as $id => $tags) {
    $commandsToInit[] = $container->get($id);
}
// Add them to the application.
$application->addCommands($commandsToInit);



// Adding a global option (env).
$dispatcher = new EventDispatcher();
$application->setDispatcher($dispatcher);
$application->getDefinition()->addOptions([
    new InputOption(
        'env',
        'e',
        InputOption::VALUE_OPTIONAL,
        'The environment to operate in.',
        'dev'
    )
]);


$application->run(null, $output);
